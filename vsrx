#!/usr/bin/python

import time
import paramiko
import argparse
from config import *

default_client_args = [
    ('username', 'admin'),
    ('password', 'contrail123'),
    ('region', 'RegionOne'),
    ('tenant', 'admin'),
    ('api_server', '127.0.0.1')]

class Vsrx():
    def __init__(self):
        self.mgmt_addr = None

    def client_args_set(self):
        args = argparse.Namespace()
        for arg in default_client_args:
            if arg[0] in sys.argv:
                idx = sys.argv.index(arg[0])
                setattr(args, sys.argv[idx], sys.argv[idx + 1])
            else:
                setattr(args, arg[0], arg[1])
        return args

    def service_launch(self):
        client_args = self.client_args_set()
        client = ConfigClient(client_args)
        config = ConfigShell()

        print 'Launch service instance.'
        cmd = 'add service-instance vsrx-nat --template vsrx-nat ' + \
                '--management-network admin:management ' + \
                '--left-network access ' + \
                '--left-route 0.0.0.0/0 ' + \
                '--right-network admin:public'

        cmd_args = config.parse(argv = cmd.split())
        config.run(cmd_args, client)

        print 'Waiting ...'
        timeout = 12
        while timeout:
            time.sleep(3)
            vm = client.nova.servers.find(name = 'vsrx-nat_1')
            if vm.status != 'BUILD':
                print 'VM %s is %s' %(vm.name, vm.status)
                break
            timeout -= 1
        self.mgmt_addr = vm.addresses['management'][0]['addr']

        print 'Post-launch configuration.'
        cmd_list = [
            'delete vm-interface vsrx-nat_1:management --security-group default',
            'delete vm-interface vsrx-nat_1:access --security-group default',
            'delete vm-interface vsrx-nat_1:public --security-group default']
        for cmd in cmd_list:
            cmd_args = config.parse(argv = cmd.split())
            config.run(cmd_args, client)

    def service_boot(self):
        print 'Waiting for Junos boots up...'
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        while True:
            try:
                ssh.connect(self.mgmt_addr, username = 'root',
                        password = 'passWD')
                break
            except:
                continue
        ssh.close()

    def service_netconf_enable(self):
        print 'Enable NETCONF service.'

        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(self.mgmt_addr, username = 'root', password = 'passWD')
        ssh.exec_command('cli -c "configure;set system services netconf ssh;set security zones security-zone trust interfaces ge-0/0/0.0 host-inbound-traffic system-services all;commit"')
        time.sleep(10)
        ssh.close()

    def service_provisioning(self):
        print 'Provisioning service.'

        from ncclient import manager as netconf

        nc_client = netconf.connect(host = self.mgmt_addr, port = 830,
                username = 'root', password = 'passWD', hostkey_verify = False,
                device_params={'name':'junos'})

        list = []
        conf = open('vsrx-nat.conf', 'r')
        for line in conf:
            line.rstrip('\n')
            list.append(line)
        conf.close()
        nc_client.load_configuration(action = 'set', config = list)
        nc_client.commit()
        nc_client.close_session()

    def config_test(self):
        client_args = self.client_args_set()
        client = ConfigClient(client_args)
        config = ConfigShell()

        cmd_list = [
            'show ipam',
            'show network',
            'show vm']
        for cmd in cmd_list:
            cmd_args = config.parse(argv = cmd.split())
            config.run(cmd_args, client)


if __name__ == '__main__':
    vsrx = Vsrx()
    vsrx.service_launch()
    vsrx.service_boot()
    vsrx.service_netconf_enable()
    vsrx.service_provisioning()

